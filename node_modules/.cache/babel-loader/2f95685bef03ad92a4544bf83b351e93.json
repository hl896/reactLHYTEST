{"ast":null,"code":"import _regeneratorRuntime from \"/Users/yang/Documents/reactLHYTEST/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/yang/Documents/reactLHYTEST/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/yang/Documents/reactLHYTEST/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yang/Documents/reactLHYTEST/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yang/Documents/reactLHYTEST/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yang/Documents/reactLHYTEST/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yang/Documents/reactLHYTEST/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yang/Documents/reactLHYTEST/src/Seasons/SeasonDisplay.jsx\";\nimport React, { Component } from 'react';\nimport { runInContext } from 'vm';\nimport './SeasondisplyStyle/seasonstyle.css';\nimport SearchApp from '../search/SearchApp';\nimport unsplash from '../api/unsplash';\nvar seasonConfig = {\n  summer: {\n    text: \"Let's hit the beach!\",\n    iconName: \"sun\"\n  },\n  winter: {\n    text: \"Burr is cold\",\n    iconName: \"snowflake\"\n  },\n  spring: {\n    text: \"flouring\",\n    iconName: \"leaf\"\n  },\n  autumn: {\n    text: \"raining\",\n    iconName: \"rain\"\n  }\n};\n\nvar getSeason = function getSeason(lat, month) {\n  // if(month>2&&month<9){\n  //     return lat>0?'sumer':'winter';\n  // }else{\n  //     return lat>0?'winter':'summer';\n  // }\n  switch (month) {\n    case 0:\n      return lat > 0 ? 'winter' : 'summer';\n      break;\n\n    case 1:\n      return lat > 0 ? 'winter' : 'summer';\n      break;\n\n    case 2:\n      return lat > 0 ? 'spring' : 'autumn';\n      break;\n\n    case 3:\n      return lat > 0 ? 'spring' : 'autumn';\n      break;\n\n    case 4:\n      return lat > 0 ? 'spring' : 'autumn';\n      break;\n\n    case 5:\n      return lat > 0 ? 'summer' : 'winter';\n      break;\n\n    case 6:\n      return lat > 0 ? 'summer' : 'winter';\n      break;\n\n    case 7:\n      return lat > 0 ? 'summer' : 'winter';\n      break;\n\n    case 8:\n      return lat > 0 ? 'autumn' : 'spring';\n      break;\n\n    case 9:\n      return lat > 0 ? 'autumn' : 'spring';\n      break;\n\n    case 10:\n      return lat > 0 ? 'autumn' : 'spring';\n      break;\n\n    case 11:\n      return lat > 0 ? 'winter' : 'summer';\n      break;\n\n    default:\n      console.log('default');\n  }\n}; // const SeasonDisplay =props=>{\n//     const season = getSeason(props.lat,new Date().getMonth());\n//     // const season ='summer';\n//     const {text, iconName}=seasonConfig[season];\n//     return (\n//         <div>\n//             <div className={`season-display ${season}`} >\n//                 <h1> <i className={`left-icon huge ${iconName} icon`}/> </h1>\n//                 <h1><button onClick={addnew} >{text}</button></h1>\n//                 <h1><i className={`right-icon huge ${iconName} icon`} /> </h1>\n//             </div>\n//         </div>\n//     );\n// }\n\n\nvar SeasonDisplay =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SeasonDisplay, _Component);\n\n  function SeasonDisplay(props) {\n    var _this;\n\n    _classCallCheck(this, SeasonDisplay);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SeasonDisplay).call(this, props));\n\n    _this.addnew = function () {\n      console.log('clicked');\n\n      _this.setState(function (prevState) {\n        return {\n          status: !prevState.status\n        };\n      });\n    };\n\n    _this.onSearchSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(term) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return unsplash.get('/search/photos', {\n                  params: {\n                    query: term\n                  }\n                }).then(function (response) {\n                  console.log(response.data.results);\n                });\n\n              case 2:\n                response = _context.sent;\n\n                _this.setState({\n                  image: response.data.results\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      status: true,\n      image: []\n    };\n    return _this;\n  }\n\n  _createClass(SeasonDisplay, [{\n    key: \"render\",\n    value: function render() {\n      var season = getSeason(this.props.lats, new Date().getMonth());\n      var _seasonConfig$season = seasonConfig[season],\n          text = _seasonConfig$season.text,\n          iconName = _seasonConfig$season.iconName;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, this.state.status ? React.createElement(\"div\", {\n        className: \"season-display \".concat(season),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \" \", React.createElement(\"i\", {\n        className: \"left-icon huge \".concat(iconName, \" icon\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), \" \"), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.addnew,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, text)), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"right-icon huge \".concat(iconName, \" icon\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }), \" \")) : React.createElement(SearchApp, {\n        myonSubmit: this.onSearchSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return SeasonDisplay;\n}(Component);\n\nexport default SeasonDisplay;","map":{"version":3,"sources":["/Users/yang/Documents/reactLHYTEST/src/Seasons/SeasonDisplay.jsx"],"names":["React","Component","runInContext","SearchApp","unsplash","seasonConfig","summer","text","iconName","winter","spring","autumn","getSeason","lat","month","console","log","SeasonDisplay","props","addnew","setState","prevState","status","onSearchSubmit","term","get","params","query","then","response","data","results","image","state","season","lats","Date","getMonth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { runInContext } from 'vm';\nimport './SeasondisplyStyle/seasonstyle.css';\nimport SearchApp from '../search/SearchApp';\nimport unsplash from '../api/unsplash';\nconst seasonConfig = {\n    summer:{\n        text:\"Let's hit the beach!\",\n        iconName:\"sun\"\n    },\n    winter:{\n        text:\"Burr is cold\",\n        iconName:\"snowflake\"\n    },\n    spring:{\n        text:\"flouring\",\n        iconName:\"leaf\"\n    },\n    autumn:{\n        text:\"raining\",\n        iconName:\"rain\"\n    }\n\n}\n\nconst getSeason=(lat,month)=>{\n    // if(month>2&&month<9){\n    //     return lat>0?'sumer':'winter';\n\n    // }else{\n    //     return lat>0?'winter':'summer';\n    // }\n    switch(month){\n        case 0:\n            return lat>0?'winter':'summer';\n            break;\n        case 1:\n            return lat>0?'winter':'summer';\n            break;\n        case 2:\n            return lat>0?'spring':'autumn';\n            break;\n        case 3:\n            return lat>0?'spring':'autumn';\n            break;\n        case 4:\n            return lat>0?'spring':'autumn';\n            break;\n        case 5:\n            return lat>0?'summer':'winter';\n            break;\n        case 6:\n            return lat>0?'summer':'winter';\n            break;\n        case 7:\n            return lat>0?'summer':'winter';\n            break;\n        case 8:\n            return lat>0?'autumn':'spring';\n            break;\n        case 9:\n            return lat>0?'autumn':'spring';\n            break;\n        case 10:\n            return lat>0?'autumn':'spring';\n            break;\n\n        case 11:\n            return lat>0?'winter':'summer';\n            break;\n        default:\n            console.log('default');\n    }\n}\n\n\n\n\n\n// const SeasonDisplay =props=>{\n//     const season = getSeason(props.lat,new Date().getMonth());\n//     // const season ='summer';\n//     const {text, iconName}=seasonConfig[season];\n    \n   \n//     return (\n//         <div>\n//             <div className={`season-display ${season}`} >\n//                 <h1> <i className={`left-icon huge ${iconName} icon`}/> </h1>\n//                 <h1><button onClick={addnew} >{text}</button></h1>\n//                 <h1><i className={`right-icon huge ${iconName} icon`} /> </h1>\n//             </div>\n//         </div>\n//     );\n\n\n// }\n\nclass SeasonDisplay extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            status:true,\n            image:[]\n        }\n        \n    }\n    addnew = () => {\n        console.log('clicked')\n        this.setState(prevState=>({\n            status:!prevState.status\n        }))\n        \n    }\n\n    onSearchSubmit=async term =>{\n        const response = await unsplash\n        .get('/search/photos',{\n            params:{query:term},\n        })\n        .then(response=>{\n            console.log(response.data.results);\n            \n        });\n        this.setState({\n            image:response.data.results\n        });\n        \n    }\n    render(){\n        const season = getSeason(this.props.lats,new Date().getMonth());\n        const {text, iconName}=seasonConfig[season];\n        return (\n            <div>\n                {\n                    this.state.status?<div className={`season-display ${season}`} >\n                        <h1> <i className={`left-icon huge ${iconName} icon`}/> </h1>\n                        <h1><button onClick={this.addnew} >{text}</button></h1>\n                        <h1><i className={`right-icon huge ${iconName} icon`} /> </h1>\n                    </div>:<SearchApp myonSubmit={this.onSearchSubmit} />\n\n                }\n            </div>\n            \n        );\n    }\n        \n}\n\nexport default SeasonDisplay;"]},"metadata":{},"sourceType":"module"}